# bot.py

import logging
import requests
import os
import tempfile
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, MessageHandler, Filters, CallbackContext,
    CallbackQueryHandler, CommandHandler
)

import os
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_URL = os.getenv("API_URL", "http://ragbot:8000")

logging.basicConfig(level=logging.INFO)

# --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø RAG-–±–æ—Ç. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏–ª–∏ –ø—Ä–∏—à–ª–∏ PDF ‚Äî –∏ —è –æ—Ç–≤–µ—á—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ –¥–µ–ª—É!\n\n"
        "‚Äî –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏\n"
        "‚Äî –ü—Ä–∏—à–ª–∏ PDF-—Ñ–∞–π–ª –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã.\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏! üëçüëé"
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF ---
def handle_document(update: Update, context: CallbackContext):
    tmp_dir = tempfile.gettempdir()
    file_path = os.path.join(tmp_dir, update.message.document.file_name)
    file = update.message.document.get_file()
    file.download(custom_path=file_path)
    with open(file_path, "rb") as f:
        resp = requests.post(
            f"{API_URL}/upload_pdf",
            files={"file": (update.message.document.file_name, f, "application/pdf")}
        )
    try:
        status = resp.json().get("status", "error")
    except Exception:
        update.message.reply_text("‚ùóÔ∏è–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ FastAPI —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF: {resp.status_code} {resp.text}")
        return
    update.message.reply_text(f"üìÑ PDF –∑–∞–≥—Ä—É–∂–µ–Ω: {status}\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É!")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
def handle_text(update: Update, context: CallbackContext):
    query = update.message.text.strip()
    if query.startswith('/'):
        return  # –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –∫—Ä–æ–º–µ /start
    data = {"query": query, "top_k": 2}
    resp = requests.post(f"{API_URL}/ask", data=data)
    if resp.status_code != 200:
        update.message.reply_text("‚ùóÔ∏è–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    result = resp.json()
    context_text = "\n\n".join(result.get("chunks", []))
    answer = result.get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")

    # –ö–Ω–æ–ø–∫–∏: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç üëçüëé
    buttons = [
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data="show_ctx")],
        [
            InlineKeyboardButton("üëç –•–æ—Ä–æ—à–∏–π", callback_data="rate_good"),
            InlineKeyboardButton("üëé –ü–ª–æ—Ö–æ–π", callback_data="rate_bad")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è callback
    context.user_data["last_context"] = context_text
    context.user_data["last_answer"] = answer
    context.user_data["last_question"] = query

    update.message.reply_text(
        f"<b>–û—Ç–≤–µ—Ç:</b>\n{answer}",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---
def button_callback(update: Update, context: CallbackContext):
    query_obj = update.callback_query
    query_obj.answer()
    cb_data = query_obj.data

    if cb_data == "show_ctx":
        ctx = context.user_data.get("last_context", "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        query_obj.message.reply_text(
            f"<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:</b>\n{ctx}", parse_mode="HTML"
        )

    elif cb_data == "rate_good":
        question = context.user_data.get("last_question", "")
        answer = context.user_data.get("last_answer", "")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫—É–¥–∞ —Ö–æ—á–µ—à—å: –≤ —Ñ–∞–π–ª, –ë–î –∏ —Ç.–ø.
        query_obj.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! üëç\n\n–¢–≤–æ–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω."
        )
        logging.info(f"[GOOD] {question} ||| {answer}")

    elif cb_data == "rate_bad":
        question = context.user_data.get("last_question", "")
        answer = context.user_data.get("last_answer", "")
        query_obj.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! üëé\n\n–¢–≤–æ–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω."
        )
        logging.info(f"[BAD] {question} ||| {answer}")

def main():
    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.document.mime_type("application/pdf"), handle_document))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))
    dp.add_handler(CallbackQueryHandler(button_callback, pattern="^(show_ctx|rate_good|rate_bad)$"))

    updater.start_polling()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ polling...")
    updater.idle()

if __name__ == "__main__":
    main()
